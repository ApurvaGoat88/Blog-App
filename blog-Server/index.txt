app.listen(5000,()=>console.log("your server is running on port 5000"));    


// 2nd Method

const express = require("express")
const app=express()

const port=process.env.port || 5002

app.route("/").get((req,res)=>res.json("This is Suhani Sahu"));

 
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

//

const express = require("express")
const app=express()

const mongoose = require("mongoose");
mongoose.connect('mongodb://127.0.0.1:27017/myapp');

const port=process.env.port || 5002

app.route("/").get((req,res)=>res.json("This is Suhani Sahu,I am a Talentless Girl."));

 
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});





/ authRoutes.js
const express = require('express');
const authcontroller = require('../controllers/authcontroller');
const passport = require('passport');
const router = express.Router();
const authmiddleware = require('../middleware/authmiddleware');

router.post('/signup', authcontroller.signup);
router.post('/login', authcontroller.login);

router.get('/success', authcontroller.success);
router.get('/failure', authcontroller.failure);

router.get('/profile', authMiddleware, authController.getProfile);

module.exports = router;


// blogController.js
const Blog = require('../models/blog');

exports.getAllBlogs = async (req, res) => {
  try {
    const blogs = await Blog.find();
    res.json(blogs);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

exports.createBlog = async (req, res) => {
  try {
    const { title, content } = req.body;
    const blog = new Blog({ title, content });
    await blog.save();
    res.status(201).json(blog);
} catch (error) {
  console.error(error);
  res.status(500).json({ message: 'Internal Server Error' });
}
};

exports.updateBlog = async (req, res) => {
try {
  const { title, content } = req.body;
  const blogId = req.params.blogId;

  const updatedBlog = await Blog.findByIdAndUpdate(
    blogId,
    { title, content },
    { new: true }
  );

  if (!updatedBlog) {
    return res.status(404).json({ message: 'Blog not found' });
  }

  res.json(updatedBlog);
} catch (error) {
  console.error(error);
  res.status(500).json({ message: 'Internal Server Error' });
}
};

exports.deleteBlog = async (req, res) => {
try {
  const blogId = req.params.blogId;

  const deletedBlog = await Blog.findByIdAndDelete(blogId);

  if (!deletedBlog) {
    return res.status(404).json({ message: 'Blog not found' });
  }

  res.json({ message: 'Blog deleted successfully' });
} catch (error) {
  console.error(error);
  res.status(500).json({ message: 'Internal Server Error' });
}
};


//blogroutes.js

const express = require('express');
const blogController = require('../controllers/blogController');
const router = express.Router();

router.get('/blogs', blogController.getAllBlogs);
router.post('/blogs', blogController.createBlog);
router.put('/blogs/:blogId', blogController.updateBlog);
router.delete('/blogs/:blogId', blogController.deleteBlog);

module.exports = router;


// middleware/authMiddleware.js

const jwt = require('jsonwebtoken');
const { secretKey } = require('../config');

const authMiddleware = (req, res, next) => {
  const token = req.headers.authorization;

  if (!token) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  try {
    const decoded = jwt.verify(token, 'secret_key');
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Unauthorized' });
  }
};

module.exports = authMiddleware;


// authRoutes.js
const express = require('express');
const authController = require('../controllers/authcontroller');
const passport = require('passport');
const router = express.Router();
const authMiddleware = require('../middleware/authMiddleware');
const blogController = require('../controllers/blogController');


router.post('/signup', authController.signup);
router.post('/login', authController.login);



router.get('/success', authController.success);
router.get('/failure', authController.failure);

router.get('/generate-test-token', authController.generateTestToken);
// Create a comment on a blog
router.post('/blogs/:blogId/comments', authMiddleware, blogController.createComment);

// Create a like on a blog
router.post('/blogs/:blogId/like', authMiddleware, blogController.likeBlog);

module.exports = router;


// authController.js
const passport = require('passport');
const bcrypt = require('bcrypt');
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const { secretKey } = require('../config'); // Assuming you have a secret key in your config



exports.signup = async (req, res) => {
  try {
    const { email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    const user = new User({ email, password: hashedPassword });
    await user.save();

    res.json({ message: 'Signup successful' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

exports.login = passport.authenticate('local', {
  successRedirect: '/api/success',
  failureRedirect: '/api/failure',
});

exports.success = (req, res) => {
  res.json({ message: 'Login successful' });
};

exports.failure = (req, res) => {
  res.status(401).json({ message: 'Login failed' });
};


exports.createBlog = async (req, res) => {
    try {
      const { title, content } = req.body;
  
      // Check if the user is authenticated
      if (!req.isAuthenticated()) {
        return res.status(401).json({ message: 'Unauthorized' });
      }
  
      // Create a new blog associated with the logged-in user
      const blog = new Blog({ title, content, author: req.user._id });
      await blog.save();
  
      // Update the user's blogs array
      req.user.blogs.push(blog._id);
      await req.user.save();
  
      res.status(201).json(blog);
    } catch (error) {
      console.error(error);
      res.status(500).json({ message: 'Internal Server Error' });
    }
  };



//login test

{ message: 'Internal Server Error' }

//

exports.login = async (req, res) => {
  passport.authenticate('local', (err, user) => {
    if (err) {
      console.error(err);
      console.log("login error");
      return res.status(500).json(err);
    }

    if (!user) {
      return res.status(401).json({ message: 'Login failed' });
    }

    // Generate a token for the authenticated user
    const token = jwt.sign({ userId: user._id, email: user.email }, secretKey, { expiresIn: '1h' });

    res.json({ message: 'Login successful', token });
  })(req, res);
};


//
exports.getBlogById = async (req, res) => {
  try {
    const blog = await Blog.findById(req.params.blogId).populate('author', 'email');

    if (!blog) {
      return res.status(404).json({ error: 'Blog not found' });
    }

    res.json(blog);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal Server Error' });
  }
};

//


// authMiddleware.js

const jwt = require('jsonwebtoken');
const { secretKey } = require('../config'); // You need to define your secret key

const authMiddleware = (req, res, next) => {
  // Check for the presence of the 'Authorization' header
  const token = req.header('Authorization');
  console.log('Received Token:', token);

  if (!token) {
    console.log('Unauthorized - No token provided');
    return res.status(401).json({ error: 'Unauthorized - No token provided' });
  }
  console.log("token is matched");
  try {
    // Verify the token
    const token1 = token.split(' ')[1];
    const decoded = jwt.verify(token1, secretKey);
    console.log("token is being verified");

    // Attach the decoded user information to the request object
    console.log("req user --",req)
    console.log("req user --",decoded.userId)

    // console.log("tooken==> ", token1);
    // console.log("response==> ",decoded);
    // console.log('Token verified successfully:', decoded.userId);
    if(req.body.userId === decoded.userId){
    next();}
    // Continue to the next middleware or route handler
  } catch (error) {
    console.error(error);
    return res.status(401).json({ error: 'Unauthorized - Invalid token' });
  }
};

module.exports = authMiddleware;